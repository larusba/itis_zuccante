{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport * as React from 'react';\nimport AppState from \"react-native-web/dist/exports/AppState\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport View from \"react-native-web/dist/exports/View\";\nimport * as Linking from 'expo-linking';\nimport * as SplashScreen from 'expo-splash-screen';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { useReduxDevToolsExtension } from '@react-navigation/devtools';\nimport { connect } from 'react-redux';\nimport HomeScreen from \"../modules/home/home-screen\";\nimport LoginScreen from \"../modules/login/login-screen\";\nimport AccountActions from \"../shared/reducers/account.reducer\";\nimport EntityStackScreen, { getEntityRoutes } from \"./entity-stack\";\nimport StorybookScreen from \"../../storybook\";\nimport ChatScreen from \"../modules/chat/chat-screen\";\nimport DrawerContent from \"./drawer/drawer-content\";\nimport { isReadyRef, navigationRef } from \"./nav-ref\";\nimport NotFound from \"./not-found-screen\";\nimport { ModalScreen } from \"./modal-screen\";\nimport { DrawerButton } from \"./drawer/drawer-button\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport var drawerScreens = [{\n  name: 'Home',\n  component: HomeScreen,\n  auth: null\n}, {\n  name: 'Login',\n  route: 'login',\n  component: LoginScreen,\n  auth: false\n}, {\n  name: 'EntityStack',\n  isStack: true,\n  component: EntityStackScreen,\n  options: {\n    title: 'Entities',\n    headerShown: false\n  },\n  auth: true\n}, {\n  name: 'Chat',\n  route: 'chat',\n  component: ChatScreen,\n  auth: true\n}];\nif (__DEV__) {\n  drawerScreens.push({\n    name: 'Storybook',\n    route: 'storybook',\n    component: StorybookScreen,\n    auth: false\n  });\n}\nexport var getDrawerRoutes = function getDrawerRoutes() {\n  var routes = {};\n  drawerScreens.forEach(function (screen) {\n    if (screen.route) {\n      routes[screen.name] = screen.route;\n    }\n  });\n  return routes;\n};\nvar linking = {\n  prefixes: ['rnapp://', Linking.makeUrl('/')],\n  config: {\n    initialRouteName: 'Home',\n    screens: {\n      Home: {\n        screens: _objectSpread(_objectSpread({}, getDrawerRoutes()), {}, {\n          EntityStack: {\n            path: 'entities',\n            screens: _objectSpread({}, getEntityRoutes())\n          }\n        })\n      },\n      ModalScreen: 'alert',\n      NotFound: '*'\n    }\n  }\n};\nvar Stack = createStackNavigator();\nvar Drawer = createDrawerNavigator();\nvar getScreens = function getScreens(props) {\n  var isAuthed = props.account !== null;\n  return drawerScreens.map(function (screen, index) {\n    if (screen.auth === null || screen.auth === undefined) {\n      return _jsx(Drawer.Screen, {\n        name: screen.name,\n        component: screen.component,\n        options: screen.options\n      }, index);\n    } else if (screen.auth === isAuthed) {\n      return _jsx(Drawer.Screen, {\n        name: screen.name,\n        component: screen.component,\n        options: screen.options\n      }, index);\n    }\n    return null;\n  });\n};\nfunction NavContainer(props) {\n  var loaded = props.loaded,\n    getAccount = props.getAccount;\n  var lastAppState = 'active';\n  React.useEffect(function () {\n    return function () {\n      isReadyRef.current = false;\n    };\n  }, []);\n  React.useEffect(function () {\n    if (loaded) {\n      SplashScreen.hideAsync();\n    }\n  }, [loaded]);\n  React.useEffect(function () {\n    var handleChange = function handleChange(nextAppState) {\n      if (lastAppState.match(/inactive|background/) && nextAppState === 'active') {\n        getAccount();\n      }\n    };\n    AppState.addEventListener('change', handleChange);\n    return function () {\n      return AppState.removeEventListener('change', handleChange);\n    };\n  }, [getAccount]);\n  useReduxDevToolsExtension(navigationRef);\n  var dimensions = useWindowDimensions();\n  return !loaded ? _jsx(View, {\n    children: _jsx(Text, {\n      children: \"Loading...\"\n    })\n  }) : _jsx(NavigationContainer, {\n    linking: linking,\n    ref: navigationRef,\n    onReady: function onReady() {\n      isReadyRef.current = true;\n    },\n    children: _jsxs(Stack.Navigator, {\n      children: [_jsx(Stack.Screen, {\n        name: \"Home\",\n        options: {\n          headerShown: false\n        },\n        children: function children() {\n          return _jsx(Drawer.Navigator, {\n            drawerContent: function drawerContent(p) {\n              return _jsx(DrawerContent, _objectSpread({}, p));\n            },\n            initialRouteName: drawerScreens[0].name,\n            drawerType: dimensions.width >= 768 ? 'permanent' : 'front',\n            screenOptions: {\n              headerShown: true,\n              headerLeft: DrawerButton\n            },\n            children: getScreens(props)\n          });\n        }\n      }), _jsx(Stack.Screen, {\n        name: \"ModalScreen\",\n        component: ModalScreen,\n        options: {\n          headerShown: false,\n          cardStyle: {\n            backgroundColor: 'transparent'\n          },\n          cardOverlayEnabled: true,\n          cardStyleInterpolator: function cardStyleInterpolator(_ref) {\n            var progress = _ref.current.progress;\n            return {\n              cardStyle: {\n                opacity: progress.interpolate({\n                  inputRange: [0, 0.5, 0.9, 1],\n                  outputRange: [0, 0.25, 0.7, 1]\n                })\n              },\n              overlayStyle: {\n                opacity: progress.interpolate({\n                  inputRange: [0, 1],\n                  outputRange: [0, 0.5],\n                  extrapolate: 'clamp'\n                })\n              }\n            };\n          }\n        }\n      }), _jsx(Stack.Screen, {\n        name: \"NotFound\",\n        component: NotFound,\n        options: {\n          title: 'Oops!'\n        }\n      })]\n    })\n  });\n}\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    loaded: state.appState.rehydrationComplete,\n    account: state.account.account\n  };\n};\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    getAccount: function getAccount() {\n      return dispatch(AccountActions.accountRequest());\n    }\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(NavContainer);","map":{"version":3,"names":["React","AppState","Text","useWindowDimensions","View","Linking","SplashScreen","NavigationContainer","createDrawerNavigator","createStackNavigator","useReduxDevToolsExtension","connect","HomeScreen","LoginScreen","AccountActions","EntityStackScreen","getEntityRoutes","StorybookScreen","ChatScreen","DrawerContent","isReadyRef","navigationRef","NotFound","ModalScreen","DrawerButton","jsx","_jsx","jsxs","_jsxs","drawerScreens","name","component","auth","route","isStack","options","title","headerShown","__DEV__","push","getDrawerRoutes","routes","forEach","screen","linking","prefixes","makeUrl","config","initialRouteName","screens","Home","_objectSpread","EntityStack","path","Stack","Drawer","getScreens","props","isAuthed","account","map","index","undefined","Screen","NavContainer","loaded","getAccount","lastAppState","useEffect","current","hideAsync","handleChange","nextAppState","match","addEventListener","removeEventListener","dimensions","children","ref","onReady","Navigator","drawerContent","p","drawerType","width","screenOptions","headerLeft","cardStyle","backgroundColor","cardOverlayEnabled","cardStyleInterpolator","_ref","progress","opacity","interpolate","inputRange","outputRange","overlayStyle","extrapolate","mapStateToProps","state","appState","rehydrationComplete","mapDispatchToProps","dispatch","accountRequest"],"sources":["/Users/albertodelazzari/repositories/ambulanza_veloce/ui/app/navigation/nav-container.js"],"sourcesContent":["import * as React from 'react';\nimport { AppState, Text, useWindowDimensions, View } from 'react-native';\nimport * as Linking from 'expo-linking';\nimport * as SplashScreen from 'expo-splash-screen';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { useReduxDevToolsExtension } from '@react-navigation/devtools';\nimport { connect } from 'react-redux';\n\n// import screens\nimport HomeScreen from '../modules/home/home-screen';\nimport LoginScreen from '../modules/login/login-screen';\nimport AccountActions from '../shared/reducers/account.reducer';\nimport EntityStackScreen, { getEntityRoutes } from './entity-stack';\nimport StorybookScreen from '../../storybook';\nimport ChatScreen from '../modules/chat/chat-screen'\nimport DrawerContent from './drawer/drawer-content';\nimport { isReadyRef, navigationRef } from './nav-ref';\nimport NotFound from './not-found-screen';\nimport { ModalScreen } from './modal-screen';\nimport { DrawerButton } from './drawer/drawer-button';\n\nexport const drawerScreens = [\n  {\n    name: 'Home',\n    component: HomeScreen,\n    auth: null,\n  },\n  {\n    name: 'Login',\n    route: 'login',\n    component: LoginScreen,\n    auth: false,\n  },\n  {\n    name: 'EntityStack',\n    isStack: true,\n    component: EntityStackScreen,\n    options: {\n      title: 'Entities',\n      headerShown: false,\n    },\n    auth: true,\n  },\n  {\n    name: 'Chat',\n    route: 'chat',\n    component: ChatScreen,\n    auth: true,\n  },\n];\nif (__DEV__) {\n  drawerScreens.push({\n    name: 'Storybook',\n    route: 'storybook',\n    component: StorybookScreen,\n    auth: false,\n  });\n}\nexport const getDrawerRoutes = () => {\n  const routes = {};\n  drawerScreens.forEach((screen) => {\n    if (screen.route) {\n      routes[screen.name] = screen.route;\n    }\n  });\n  return routes;\n};\n\nconst linking = {\n  prefixes: ['rnapp://', Linking.makeUrl('/')],\n  config: {\n    initialRouteName: 'Home',\n    screens: {\n      Home: {\n        screens: {\n          ...getDrawerRoutes(),\n          EntityStack: {\n            path: 'entities',\n            screens: {\n              ...getEntityRoutes(),\n            },\n          },\n        },\n      },\n      ModalScreen: 'alert',\n      NotFound: '*',\n    },\n  },\n};\n\nconst Stack = createStackNavigator();\nconst Drawer = createDrawerNavigator();\n\nconst getScreens = (props) => {\n  const isAuthed = props.account !== null;\n  return drawerScreens.map((screen, index) => {\n    if (screen.auth === null || screen.auth === undefined) {\n      return <Drawer.Screen name={screen.name} component={screen.component} options={screen.options} key={index} />;\n    } else if (screen.auth === isAuthed) {\n      return <Drawer.Screen name={screen.name} component={screen.component} options={screen.options} key={index} />;\n    }\n    return null;\n  });\n};\n\nfunction NavContainer(props) {\n  const { loaded, getAccount } = props;\n  const lastAppState = 'active';\n\n  React.useEffect(() => {\n    return () => {\n      isReadyRef.current = false;\n    };\n  }, []);\n\n  React.useEffect(() => {\n    if (loaded) {\n      SplashScreen.hideAsync();\n    }\n  }, [loaded]);\n\n  React.useEffect(() => {\n    const handleChange = (nextAppState) => {\n      if (lastAppState.match(/inactive|background/) && nextAppState === 'active') {\n        getAccount();\n      }\n    };\n    AppState.addEventListener('change', handleChange);\n    return () => AppState.removeEventListener('change', handleChange);\n  }, [getAccount]);\n\n  useReduxDevToolsExtension(navigationRef);\n\n  const dimensions = useWindowDimensions();\n  return !loaded ? (\n    <View>\n      <Text>Loading...</Text>\n    </View>\n  ) : (\n    <NavigationContainer\n      linking={linking}\n      ref={navigationRef}\n      onReady={() => {\n        isReadyRef.current = true;\n      }}>\n      <Stack.Navigator>\n        <Stack.Screen name=\"Home\" options={{ headerShown: false }}>\n          {() => (\n            <Drawer.Navigator\n              drawerContent={(p) => <DrawerContent {...p} />}\n              initialRouteName={drawerScreens[0].name}\n              drawerType={dimensions.width >= 768 ? 'permanent' : 'front'}\n              screenOptions={{ headerShown: true, headerLeft: DrawerButton }}>\n              {getScreens(props)}\n            </Drawer.Navigator>\n          )}\n        </Stack.Screen>\n        <Stack.Screen\n          name=\"ModalScreen\"\n          component={ModalScreen}\n          options={{\n            headerShown: false,\n            cardStyle: { backgroundColor: 'transparent' },\n            cardOverlayEnabled: true,\n            cardStyleInterpolator: ({ current: { progress } }) => ({\n              cardStyle: {\n                opacity: progress.interpolate({\n                  inputRange: [0, 0.5, 0.9, 1],\n                  outputRange: [0, 0.25, 0.7, 1],\n                }),\n              },\n              overlayStyle: {\n                opacity: progress.interpolate({\n                  inputRange: [0, 1],\n                  outputRange: [0, 0.5],\n                  extrapolate: 'clamp',\n                }),\n              },\n            }),\n          }}\n        />\n        <Stack.Screen name=\"NotFound\" component={NotFound} options={{ title: 'Oops!' }} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    loaded: state.appState.rehydrationComplete,\n    account: state.account.account,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    getAccount: () => dispatch(AccountActions.accountRequest()),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NavContainer);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}