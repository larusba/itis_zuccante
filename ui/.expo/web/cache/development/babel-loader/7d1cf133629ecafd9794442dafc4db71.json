{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { connect } from 'react-redux';\nimport WebsocketService from \"../../shared/websockets/websocket.service\";\nimport { getLogin } from \"../../shared/reducers/account.reducer\";\nimport ChatActions from \"./chat.reducer\";\nimport styles from \"./chat-screen.styles\";\nimport RoundedButton from \"../../shared/components/rounded-button/rounded-button\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction ChatScreen(props) {\n  var _React$useState = React.useState(''),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    message = _React$useState2[0],\n    setMessage = _React$useState2[1];\n  var username = props.username,\n    chat = props.chat;\n  React.useEffect(function () {\n    WebsocketService.connect();\n    return function cleanup() {\n      WebsocketService.disconnect();\n    };\n  }, []);\n  React.useEffect(function () {\n    if (username !== 'anonymoususer') {\n      WebsocketService.subscribeToChat();\n    }\n  }, [username]);\n  var renderRow = function renderRow(item, index) {\n    return _jsxs(View, {\n      style: styles.row,\n      testID: \"message-\" + index,\n      children: [_jsx(Text, {\n        style: styles.boldLabel,\n        children: item.user\n      }), _jsx(Text, {\n        children: item.message\n      })]\n    }, index);\n  };\n  var updateMessage = function updateMessage(newMessage) {\n    return setMessage(newMessage);\n  };\n  var oneScreensWorth = 21;\n  var memoizedChat = React.useMemo(function () {\n    return _jsx(View, {\n      style: styles.flex,\n      children: chat.map(function (c, i) {\n        return renderRow(c, i);\n      })\n    });\n  }, [chat]);\n  var memoizedForm = React.useMemo(function () {\n    var sendMessage = function sendMessage() {\n      if (message.length > 0) {\n        WebsocketService.sendChat({\n          user: username,\n          message: message\n        });\n        setMessage('');\n      }\n    };\n    return _jsxs(View, {\n      style: styles.inputContainer,\n      children: [_jsx(TextInput, {\n        placeholder: \"Type a message...\",\n        style: styles.messageInput,\n        value: message,\n        onChangeText: updateMessage,\n        autoCapitalize: \"none\",\n        onSubmitEditing: sendMessage,\n        returnKeyType: message.length > 0 ? 'send' : 'done',\n        autoCorrect: false,\n        testID: \"chatScreenInput\"\n      }), _jsx(RoundedButton, {\n        style: styles.button,\n        onPress: sendMessage,\n        text: 'Send',\n        testID: \"chatScreenSendButton\"\n      })]\n    });\n  }, [message, username]);\n  var scrollViewRef = React.useRef();\n  return _jsx(View, {\n    style: styles.container,\n    children: _jsxs(KeyboardAvoidingView, {\n      keyboardVerticalOffset: 75,\n      behavior: Platform.OS === 'ios' ? 'padding' : 'height',\n      style: styles.flex,\n      children: [_jsx(ScrollView, {\n        ref: scrollViewRef,\n        keyboardShouldPersistTaps: \"handled\",\n        keyboardDismissMode: \"on-drag\",\n        testID: \"chatScreen\",\n        renderItem: renderRow,\n        onContentSizeChange: function onContentSizeChange() {\n          return scrollViewRef.current.scrollToEnd({\n            animated: true\n          });\n        },\n        initialNumToRender: oneScreensWorth,\n        children: memoizedChat\n      }), memoizedForm]\n    })\n  });\n}\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    chat: state.chat.chat,\n    username: getLogin(state.account)\n  };\n};\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    resetChat: dispatch(ChatActions.chatReset())\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatScreen);","map":{"version":3,"names":["React","View","Text","KeyboardAvoidingView","TextInput","ScrollView","Platform","connect","WebsocketService","getLogin","ChatActions","styles","RoundedButton","jsx","_jsx","jsxs","_jsxs","ChatScreen","props","_React$useState","useState","_React$useState2","_slicedToArray","message","setMessage","username","chat","useEffect","cleanup","disconnect","subscribeToChat","renderRow","item","index","style","row","testID","children","boldLabel","user","updateMessage","newMessage","oneScreensWorth","memoizedChat","useMemo","flex","map","c","i","memoizedForm","sendMessage","length","sendChat","inputContainer","placeholder","messageInput","value","onChangeText","autoCapitalize","onSubmitEditing","returnKeyType","autoCorrect","button","onPress","text","scrollViewRef","useRef","container","keyboardVerticalOffset","behavior","OS","ref","keyboardShouldPersistTaps","keyboardDismissMode","renderItem","onContentSizeChange","current","scrollToEnd","animated","initialNumToRender","mapStateToProps","state","account","mapDispatchToProps","dispatch","resetChat","chatReset"],"sources":["/Users/albertodelazzari/repositories/ambulanza_veloce/ui/app/modules/chat/chat-screen.js"],"sourcesContent":["import React from 'react';\nimport { View, Text, KeyboardAvoidingView, TextInput, ScrollView, Platform } from 'react-native';\nimport { connect } from 'react-redux';\n\nimport WebsocketService from '../../shared/websockets/websocket.service';\nimport { getLogin } from '../../shared/reducers/account.reducer';\nimport ChatActions from './chat.reducer';\nimport styles from './chat-screen.styles';\nimport RoundedButton from '../../shared/components/rounded-button/rounded-button';\n\nfunction ChatScreen(props) {\n  const [message, setMessage] = React.useState('');\n  const { username, chat } = props;\n\n  React.useEffect(() => {\n    WebsocketService.connect();\n    return function cleanup() {\n      WebsocketService.disconnect();\n    };\n  }, []);\n\n  React.useEffect(() => {\n    if (username !== 'anonymoususer') {\n      WebsocketService.subscribeToChat();\n    }\n  }, [username]);\n\n  const renderRow = (item, index) => {\n    return (\n      <View style={styles.row} key={index} testID={`message-${index}`}>\n        <Text style={styles.boldLabel}>{item.user}</Text>\n        <Text>{item.message}</Text>\n      </View>\n    );\n  };\n\n  const updateMessage = (newMessage) => setMessage(newMessage);\n\n  // How many items should be kept im memory as we scroll?\n  const oneScreensWorth = 21;\n\n  const memoizedChat = React.useMemo(() => <View style={styles.flex}>{chat.map((c, i) => renderRow(c, i))}</View>, [chat]);\n  const memoizedForm = React.useMemo(() => {\n    const sendMessage = () => {\n      if (message.length > 0) {\n        WebsocketService.sendChat({ user: username, message });\n        setMessage('');\n      }\n    };\n\n    return (\n      <View style={styles.inputContainer}>\n        <TextInput\n          placeholder=\"Type a message...\"\n          style={styles.messageInput}\n          value={message}\n          onChangeText={updateMessage}\n          autoCapitalize=\"none\"\n          onSubmitEditing={sendMessage}\n          returnKeyType={message.length > 0 ? 'send' : 'done'}\n          autoCorrect={false}\n          testID=\"chatScreenInput\"\n        />\n        <RoundedButton style={styles.button} onPress={sendMessage} text={'Send'} testID=\"chatScreenSendButton\" />\n      </View>\n    );\n  }, [message, username]);\n\n  const scrollViewRef = React.useRef();\n\n  return (\n    <View style={styles.container}>\n      <KeyboardAvoidingView keyboardVerticalOffset={75} behavior={Platform.OS === 'ios' ? 'padding' : 'height'} style={styles.flex}>\n        <ScrollView\n          ref={scrollViewRef}\n          keyboardShouldPersistTaps=\"handled\"\n          keyboardDismissMode=\"on-drag\"\n          testID=\"chatScreen\"\n          renderItem={renderRow}\n          onContentSizeChange={() => scrollViewRef.current.scrollToEnd({ animated: true })}\n          initialNumToRender={oneScreensWorth}>\n          {memoizedChat}\n        </ScrollView>\n        {memoizedForm}\n      </KeyboardAvoidingView>\n    </View>\n  );\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    chat: state.chat.chat,\n    username: getLogin(state.account),\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    resetChat: dispatch(ChatActions.chatReset()),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatScreen);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}