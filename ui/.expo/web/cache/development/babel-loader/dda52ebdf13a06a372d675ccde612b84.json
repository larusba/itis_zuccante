{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { createRef } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view';\nimport { connect } from 'react-redux';\nimport * as Yup from 'yup';\nimport LoginActions from \"./login.reducer\";\nimport { useDidUpdateEffect } from \"../../shared/util/use-did-update-effect\";\nimport FormButton from \"../../shared/components/form/jhi-form-button\";\nimport FormField from \"../../shared/components/form/jhi-form-field\";\nimport Form from \"../../shared/components/form/jhi-form\";\nimport styles from \"./login-screen.styles\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nfunction LoginScreen(props) {\n  var account = props.account,\n    navigation = props.navigation,\n    fetching = props.fetching,\n    loginError = props.loginError,\n    attemptLogin = props.attemptLogin;\n  var _React$useState = React.useState(''),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    error = _React$useState2[0],\n    setError = _React$useState2[1];\n  React.useEffect(function () {\n    if (account !== null) {\n      navigation.navigate('Home');\n    }\n  }, [account, navigation]);\n  useDidUpdateEffect(function () {\n    if (!fetching && loginError) {\n      setError(loginError);\n    }\n  }, [fetching]);\n  var onSubmit = function onSubmit(data) {\n    setError('');\n    attemptLogin(data.login, data.password);\n  };\n  var passwordRef = createRef();\n  var formRef = createRef();\n  var validationSchema = Yup.object().shape({\n    login: Yup.string().required('Please enter your login').label('Login'),\n    password: Yup.string().required().label('Password')\n  });\n  return _jsxs(KeyboardAwareScrollView, {\n    contentContainerStyle: styles.container,\n    testID: \"loginScreen\",\n    keyboardShouldPersistTaps: \"handled\",\n    keyboardDismissMode: \"on-drag\",\n    children: [!!error && _jsx(Text, {\n      style: styles.errorText,\n      children: error\n    }), _jsxs(Form, {\n      initialValues: {\n        login: '',\n        password: ''\n      },\n      validationSchema: validationSchema,\n      onSubmit: onSubmit,\n      ref: formRef,\n      children: [_jsx(FormField, {\n        name: \"login\",\n        testID: \"loginScreenUsername\",\n        label: \"Login\",\n        placeholder: \"Enter login\",\n        onSubmitEditing: function onSubmitEditing() {\n          var _passwordRef$current;\n          return passwordRef == null ? void 0 : (_passwordRef$current = passwordRef.current) == null ? void 0 : _passwordRef$current.focus();\n        },\n        autoCapitalize: \"none\",\n        textContentType: \"username\"\n      }), _jsx(FormField, {\n        ref: passwordRef,\n        name: \"password\",\n        testID: \"loginScreenPassword\",\n        label: \"Password\",\n        placeholder: \"Enter password\",\n        autoCapitalize: \"none\",\n        autoCorrect: false,\n        secureTextEntry: true,\n        onSubmitEditing: function onSubmitEditing() {\n          var _formRef$current;\n          return formRef == null ? void 0 : (_formRef$current = formRef.current) == null ? void 0 : _formRef$current.submitForm();\n        },\n        textContentType: \"password\"\n      }), _jsx(FormButton, {\n        testID: \"loginScreenLoginButton\",\n        title: 'Login'\n      })]\n    })]\n  });\n}\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    account: state.account.account,\n    fetching: state.login.fetching,\n    loginError: state.login.error\n  };\n};\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    attemptLogin: function attemptLogin(username, password) {\n      return dispatch(LoginActions.loginRequest(username, password));\n    }\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginScreen);","map":{"version":3,"names":["React","createRef","Text","KeyboardAwareScrollView","connect","Yup","LoginActions","useDidUpdateEffect","FormButton","FormField","Form","styles","jsx","_jsx","jsxs","_jsxs","LoginScreen","props","account","navigation","fetching","loginError","attemptLogin","_React$useState","useState","_React$useState2","_slicedToArray","error","setError","useEffect","navigate","onSubmit","data","login","password","passwordRef","formRef","validationSchema","object","shape","string","required","label","contentContainerStyle","container","testID","keyboardShouldPersistTaps","keyboardDismissMode","children","style","errorText","initialValues","ref","name","placeholder","onSubmitEditing","_passwordRef$current","current","focus","autoCapitalize","textContentType","autoCorrect","secureTextEntry","_formRef$current","submitForm","title","mapStateToProps","state","mapDispatchToProps","dispatch","username","loginRequest"],"sources":["/Users/albertodelazzari/repositories/ambulanza_veloce/ui/app/modules/login/login-screen.js"],"sourcesContent":["import React, { createRef } from 'react';\nimport { Text } from 'react-native';\nimport { KeyboardAwareScrollView } from 'react-native-keyboard-aware-scroll-view';\nimport { connect } from 'react-redux';\nimport * as Yup from 'yup';\n\nimport LoginActions from './login.reducer';\nimport { useDidUpdateEffect } from '../../shared/util/use-did-update-effect';\nimport FormButton from '../../shared/components/form/jhi-form-button';\nimport FormField from '../../shared/components/form/jhi-form-field';\nimport Form from '../../shared/components/form/jhi-form';\nimport styles from './login-screen.styles';\n\nfunction LoginScreen(props) {\n  const { account, navigation, fetching, loginError, attemptLogin } = props;\n  // setup error state for displaying error messages\n  const [error, setError] = React.useState('');\n\n  // if the user is already logged in, send them home\n  React.useEffect(() => {\n    if (account !== null) {\n      navigation.navigate('Home');\n    }\n  }, [account, navigation]);\n\n  // skip the first render but check for API responses and show error if not fetching\n  useDidUpdateEffect(() => {\n    if (!fetching && loginError) {\n      setError(loginError);\n    }\n  }, [fetching]);\n\n  // submit handler\n  const onSubmit = data => {\n    setError('');\n    attemptLogin(data.login, data.password);\n  };\n\n  // create refs for handling onSubmit functionality\n  const passwordRef = createRef();\n  const formRef = createRef();\n\n  // set up validation schema for the form\n  const validationSchema = Yup.object().shape({\n    login: Yup.string().required('Please enter your login').label('Login'),\n    password: Yup.string().required().label('Password'),\n  });\n\n  return (\n    <KeyboardAwareScrollView\n      contentContainerStyle={styles.container}\n      testID=\"loginScreen\"\n      keyboardShouldPersistTaps=\"handled\"\n      keyboardDismissMode=\"on-drag\"\n    >\n      {!!error && <Text style={styles.errorText}>{error}</Text>}\n      <Form initialValues={{ login: '', password: '' }} validationSchema={validationSchema} onSubmit={onSubmit} ref={formRef}>\n        <FormField\n          name=\"login\"\n          testID=\"loginScreenUsername\"\n          label=\"Login\"\n          placeholder=\"Enter login\"\n          onSubmitEditing={() => passwordRef?.current?.focus()}\n          autoCapitalize=\"none\"\n          textContentType=\"username\"\n        />\n        <FormField\n          ref={passwordRef}\n          name=\"password\"\n          testID=\"loginScreenPassword\"\n          label=\"Password\"\n          placeholder=\"Enter password\"\n          autoCapitalize=\"none\"\n          autoCorrect={false}\n          secureTextEntry={true}\n          onSubmitEditing={() => formRef?.current?.submitForm()}\n          textContentType=\"password\"\n        />\n        <FormButton testID=\"loginScreenLoginButton\" title={'Login'} />\n      </Form>\n    </KeyboardAwareScrollView>\n  );\n}\n\nconst mapStateToProps = state => {\n  return {\n    account: state.account.account,\n    fetching: state.login.fetching,\n    loginError: state.login.error,\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    attemptLogin: (username, password) => dispatch(LoginActions.loginRequest(username, password)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginScreen);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}