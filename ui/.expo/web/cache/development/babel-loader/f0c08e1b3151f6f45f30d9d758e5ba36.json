{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _createReducer;\nimport { createReducer, createActions } from 'reduxsauce';\nimport Immutable from 'seamless-immutable';\nvar _createActions = createActions({\n    accountRequest: [],\n    accountSuccess: ['account'],\n    accountFailure: ['error'],\n    accountUpdateRequest: ['account'],\n    accountUpdateSuccess: [],\n    accountUpdateFailure: ['error'],\n    accountReset: []\n  }),\n  Types = _createActions.Types,\n  Creators = _createActions.Creators;\nexport var AccountTypes = Types;\nexport default Creators;\nexport var INITIAL_STATE = Immutable({\n  account: null,\n  error: null,\n  fetching: false,\n  updating: false\n});\nexport var request = function request(state) {\n  return state.merge({\n    fetching: true\n  });\n};\nexport var success = function success(state, data) {\n  var account = data.account;\n  return state.merge({\n    fetching: false,\n    error: null,\n    account: account\n  });\n};\nexport var failure = function failure(state, _ref) {\n  var error = _ref.error;\n  return state.merge({\n    fetching: false,\n    updating: false,\n    account: null,\n    error: error\n  });\n};\nexport var updateRequest = function updateRequest(state) {\n  return state.merge({\n    updating: true\n  });\n};\nexport var updateSuccess = function updateSuccess(state) {\n  return state.merge({\n    error: null,\n    updating: false\n  });\n};\nexport var updateFailure = function updateFailure(state, _ref2) {\n  var error = _ref2.error;\n  return state.merge({\n    updating: false,\n    error: error\n  });\n};\nexport var reset = function reset() {\n  return INITIAL_STATE;\n};\nexport var reducer = createReducer(INITIAL_STATE, (_createReducer = {}, _defineProperty(_createReducer, Types.ACCOUNT_REQUEST, request), _defineProperty(_createReducer, Types.ACCOUNT_SUCCESS, success), _defineProperty(_createReducer, Types.ACCOUNT_FAILURE, failure), _defineProperty(_createReducer, Types.ACCOUNT_UPDATE_REQUEST, updateRequest), _defineProperty(_createReducer, Types.ACCOUNT_UPDATE_SUCCESS, updateSuccess), _defineProperty(_createReducer, Types.ACCOUNT_UPDATE_FAILURE, updateFailure), _defineProperty(_createReducer, Types.ACCOUNT_RESET, reset), _createReducer));\nexport var isLoggedIn = function isLoggedIn(accountState) {\n  return accountState.account !== null;\n};\nexport var getLogin = function getLogin(accountState) {\n  return accountState.account !== null ? accountState.account.login : 'anonymoususer';\n};","map":{"version":3,"names":["createReducer","createActions","Immutable","_createActions","accountRequest","accountSuccess","accountFailure","accountUpdateRequest","accountUpdateSuccess","accountUpdateFailure","accountReset","Types","Creators","AccountTypes","INITIAL_STATE","account","error","fetching","updating","request","state","merge","success","data","failure","_ref","updateRequest","updateSuccess","updateFailure","_ref2","reset","reducer","_createReducer","_defineProperty","ACCOUNT_REQUEST","ACCOUNT_SUCCESS","ACCOUNT_FAILURE","ACCOUNT_UPDATE_REQUEST","ACCOUNT_UPDATE_SUCCESS","ACCOUNT_UPDATE_FAILURE","ACCOUNT_RESET","isLoggedIn","accountState","getLogin","login"],"sources":["/Users/albertodelazzari/repositories/ambulanza_veloce/ui/app/shared/reducers/account.reducer.js"],"sourcesContent":["import { createReducer, createActions } from 'reduxsauce';\nimport Immutable from 'seamless-immutable';\n/* ------------- Types and Action Creators ------------- */\n\nconst { Types, Creators } = createActions({\n  accountRequest: [],\n  accountSuccess: ['account'],\n  accountFailure: ['error'],\n  accountUpdateRequest: ['account'],\n  accountUpdateSuccess: [],\n  accountUpdateFailure: ['error'],\n  accountReset: [],\n});\n\nexport const AccountTypes = Types;\nexport default Creators;\n\n/* ------------- Initial State ------------- */\n\nexport const INITIAL_STATE = Immutable({\n  account: null,\n  error: null,\n  fetching: false,\n  updating: false,\n});\n\n/* ------------- Reducers ------------- */\n\n// we're attempting to account\nexport const request = state => state.merge({ fetching: true });\n\n// we've successfully logged in\nexport const success = (state, data) => {\n  const { account } = data;\n  return state.merge({ fetching: false, error: null, account });\n};\n\n// we've had a problem getting the account\nexport const failure = (state, { error }) => state.merge({ fetching: false, updating: false, account: null, error });\n\n// we're attempting to updating account settings\nexport const updateRequest = state => state.merge({ updating: true });\n\n// we've successfully updated the account settings\nexport const updateSuccess = state => state.merge({ error: null, updating: false });\n\n// we've had a problem updating the account settings\nexport const updateFailure = (state, { error }) => state.merge({ updating: false, error });\n\n// reset the account reducer\nexport const reset = () => INITIAL_STATE;\n\n/* ------------- Hookup Reducers To Types ------------- */\n\nexport const reducer = createReducer(INITIAL_STATE, {\n  [Types.ACCOUNT_REQUEST]: request,\n  [Types.ACCOUNT_SUCCESS]: success,\n  [Types.ACCOUNT_FAILURE]: failure,\n  [Types.ACCOUNT_UPDATE_REQUEST]: updateRequest,\n  [Types.ACCOUNT_UPDATE_SUCCESS]: updateSuccess,\n  [Types.ACCOUNT_UPDATE_FAILURE]: updateFailure,\n  [Types.ACCOUNT_RESET]: reset,\n});\n\n/* ------------- Selectors ------------- */\n// Is the current user logged in?\nexport const isLoggedIn = accountState => accountState.account !== null;\n\nexport const getLogin = accountState => (accountState.account !== null ? accountState.account.login : 'anonymoususer');\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}